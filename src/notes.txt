points to remember:

DAY1:
name of app: netflix-clone
have also used firebase(netflix-clone)
https://www.themoviedb.org/ is the site used for taking info on movies,shows....
npm start to start the react build
we have stopped at 38:45 just after adding the test description of the banner....

DAY2:
Banner red: https://www.netflixanimation.com/static/images/ribbon_03__desktop_.jpg
Banner black: https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSttdDBfJxXvpz9RzDvhy1CcTWWOSi5pdeKSjCsqy9HapbQKwbywiWYbN3E9oKVeH0UZQ&usqp=CAU
banner black(standard): https://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Black_flag.svg/1200px-Black_flag.svg.png
we have stopped at 49:41 after going through the movie description with limit....
created an account on tmdb site 
used API for fetching the data from the site
user-select: none;  /*prevents the text from being selected*/ banner.css(line55)
now we change the backgroundImage of banner to the one we have fetched from the site
removed image: https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSttdDBfJxXvpz9RzDvhy1CcTWWOSi5pdeKSjCsqy9HapbQKwbywiWYbN3E9oKVeH0UZQ&usqp=CAU
import from the local axios and not the global axios in banner.js (VERY IMPORTANT!!!)
stopped at 1:12:16 where we started adding titles to the rows
at 1:29:48, we started firebase hosting of the clone
steps for getting the firebase CLI(already installed): 1.firebase login 2.firebase init
now we select *hosting:configure files for Firebase Hosting...*
now select project required
select the public directory as build(VERY VERY IMPORTANT)
later we will configure it as a single-page app(if required)
then we can choose if we want to do with GitHub(not right now, so selected NO)
later we do npm run build (CREATES AN OPTIMIZED BUILD OF THE APP: removes all the useless stuff for our app)
(NPM RUN BUILD IS NECCESSARY FOR EVERY SMALL CHANGE DONE TO THE APP)
then we do firebase deploy
we have stopped at 1:33:08 after finally deploying to firebase at https://netflix-clone-796a2.web.app/

DAY3:
we have started out by thinking how to create the home page of the app
we also installed firebase(which will be used later)
for the home page, we will make it on another port(USE npm start to create another build on another port)
in order to have different pages on a website, we need "react-router" on the site: npm install react-router-dom
stopped at 1:35:56 (did not install react-router-dom yet)

DAY4:
we have started out by installing react-router-dom
Router basically helps us to have different pages on the website... it uses a "switch" to switch between the pages
and to render what we want to render on the page, we use "Route"
we started to make a new page for the login page for users
stopped at 1:56:42 making buttons for the login page
we still need to resize them and make it properly

DAY5:
We started making the signup/signin pages
Finished the SignUp page
stopped at 2:10:27 after starting making the signin button
we have finished the signin page
now we will use firebase authentication to make the signin/signup page work
**note we can have many normal exports but only one default export**
stopped at 2:25:41 when we finally were able to show that a user has signed in on the console
now we have to make the user sign in and sign up on the firebase console
we will now understand what redux does... we will now be using store.js and userSlice.js
stopped at 2:35:48 where we are using dispatch from redux...
we can use redux dev tools to see the state of the app and to understand what is happening
we will be storing the user info in the store.js through the dispatch method
stopped at 2:58:23 where we have started to create a Firebase Database for the User Info
Now we will use extensions in Firebase to implement "Stripe Payments" for the SUBSCRIPTIONS
for STRIPE PAYMENTS, it is required to provide the card-details of the user (CHANGE plan of the Firebase account)
We will then provide a set of tools for authentication thru Firebase
when we go to the 3rd step, Configure Extension, we will be able to see that how the collections are formed
Then click on sync with the database so that all payments will be visible in the database
For API Key, we will go to STRIPE site and create an account to get the API Keys
There are 2 keys available(Publisher Key & Secret Key)... we will be using the TEST KEY(NOT THE LIVE KEY)**VERY IMPORTANT**
Put the Secret Key(We can use Restricted Key as well) in the tab given and then click Next
The Extension will install slowly... we will then click on the "Go to Extension" button
To understand the extension: https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md
This extension will manage all of the users SUBSCRIPTIONS and all of the payments in the firestore
We will update the rules of the Firestore using the above github link and the actual rules for this project that is available...
Go to Firestore and click on Rules and copy the following data
Then edit it properly to make it work for our project (VERY IMPORTANT: 3:08:07)... look at the step and do it properly
This code basically tells us that only the specific users can access their respective data...
Click on Publish and then check the Extension tab...
Now for including it in our project.. Using the WebHooks of Stripe is IMPORTANT
We will be using the WebHooks of Stripe to make the payments work
3:09:18 is the time when we started to use the WebHooks of Stripe... follow this video to understand it properly
3:13:50 is for adding types of plans under PRODUCTS tab in Stripe
3:16:58 is for using the different "PRODUCTS" in the extension
stopped at 3:17:07 where we are using the "PRODUCTS" in the extension

DAY6:
We have been looking at how the payments work and how the customer portal is displayed and what all options are available...
at 3:22:28 we will understand how to use the stripe payments in the code,extension...
at 3:26:32 we will need to recreate the products as they have not been included in the database firestore
at 3:32:56 we will be adding all the plans thru a PlansScreen.js file with the help of Firestore Database
at 3:35:45 we will be adding the plans...  **VERY IMPORTANT**
at 3:43:30 we will rendering the plans on the screen (NOT ABLE TO SEE CURRENTLY as not enabled STRIPE Payments)
at 3:49:03 we will be starting the loadCheckout function in PlansScreen which is **VERY IMPORTANT**
at 3:55:46 we will be using Stripe Extension for the checkout sessions
Need to "import {loadStripe} from "@stripe/stripe-js";" so that we can use Stripe functionalities...
to install stripe "npm install @stripe/stripe-js"
at 3:59:14 we will test out the checkout session and see if it works or not
TEST CARD: 4242 4242 4242 4242
MONTH: 04/24
CVV: 424
NAME: ABC
BILLING ADDRESS: UK
Line1: ABC
Line2: ABC
City: London
Pin: ABC
Now click on subscribe
This will process the payment and then we will be able to see the payment in the Stripe Dashboard
This will then update the Firestore database and then directed to successURL
at 4:04:10 we will assign "roles" to the users so that they can access the content in the Firestore
This will be thru the Stripe Metadata under the specific Products... we will get a "firebaseRole" which will show the product name
We will edit metadata and enter key as firebaseRole and type in the specific product name respectively...
test this with a new account and see how the same is reflected in firebase console
after 4:20:07 we will say "npm run build" to create an application for the app we have made...
then say "firebase deploy"